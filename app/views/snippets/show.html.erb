<div id="header">
    <svg width="63" height="40" xmlns="http://www.w3.org/2000/svg"><defs><filter x="-3.4%" y="-10.3%" width="113.6%" height="120.5%" filterUnits="objectBoundingBox" id="a"><feOffset dx="2" in="SourceAlpha" result="shadowOffsetOuter1"/><feGaussianBlur stdDeviation="1" in="shadowOffsetOuter1" result="shadowBlurOuter1"/><feColorMatrix values="0 0 0 0 0.881058673 0 0 0 0 0.881058673 0 0 0 0 0.881058673 0 0 0 0.5 0" in="shadowBlurOuter1" result="shadowMatrixOuter1"/><feMerge><feMergeNode in="shadowMatrixOuter1"/><feMergeNode in="SourceGraphic"/></feMerge></filter><linearGradient x1="-12.533%" y1="0%" y2="100%" id="b"><stop stop-color="#4FB0B0" offset="0%"/><stop stop-color="#2B3990" offset="100%"/></linearGradient></defs><g filter="url(#a)" fill-rule="nonzero" fill="none"><path fill="url(#b)" d="M0 0v39h44.249L59 19.5 44.249 0z"/><path d="M37.299 18.7a4.271 4.271 0 0 0 1.648-3.419c0-2.294-1.705-4.155-3.808-4.155-2.103 0-3.808 1.86-3.808 4.155a4.26 4.26 0 0 0 1.648 3.417c-.74.348-1.41.834-1.974 1.43a8.914 8.914 0 0 0-3.782-3.15 4.977 4.977 0 0 0 2.04-4.044C29.264 10.208 27.13 8 24.5 8s-4.764 2.214-4.764 4.94a4.981 4.981 0 0 0 2.039 4.044 8.93 8.93 0 0 0-3.78 3.151 6.566 6.566 0 0 0-1.974-1.431 4.26 4.26 0 0 0 1.648-3.417c0-2.294-1.705-4.155-3.808-4.155-2.103 0-3.808 1.861-3.808 4.155a4.271 4.271 0 0 0 1.648 3.419C8.971 19.959 7 23.526 7 27.73h1.034c0-4.466 2.609-8.076 5.827-8.076 1.295 0 2.489.586 3.457 1.576a13.552 13.552 0 0 0-1.602 6.5c0 2.91 1.119 5.269 2.503 5.269 1.384 0 2.503-2.36 2.503-5.27 0-2.453-.675-4.702-1.782-6.393 1.366-1.963 3.35-3.2 5.56-3.2 2.21 0 4.194 1.227 5.56 3.2-1.107 1.69-1.782 3.932-1.782 6.394 0 2.91 1.121 5.269 2.503 5.269 1.382 0 2.503-2.36 2.503-5.27a13.552 13.552 0 0 0-1.602-6.499c.968-.99 2.162-1.576 3.457-1.576 3.218 0 5.827 3.617 5.827 8.076H42c0-4.212-1.962-7.778-4.701-9.031zm-23.392-.477h-.088c-1.47-.024-2.653-1.329-2.653-2.936s1.212-2.94 2.695-2.94c1.483 0 2.695 1.317 2.695 2.94 0 1.624-1.182 2.904-2.649 2.936zm5.78 9.508c0 2.14-.583 3.885-1.31 3.885-.728 0-1.338-1.748-1.338-3.885a11.602 11.602 0 0 1 1.23-5.277 10.036 10.036 0 0 1 1.419 5.27v.007zm4.85-11.295h-.065c-1.855-.018-3.347-1.55-3.338-3.426.01-1.878 1.515-3.395 3.37-3.395 1.855 0 3.361 1.517 3.37 3.395.009 1.877-1.483 3.408-3.338 3.426zm7.42 11.289c0 2.14-.606 3.885-1.337 3.885-.732 0-1.312-1.749-1.312-3.885a10.03 10.03 0 0 1 1.415-5.277 11.602 11.602 0 0 1 1.234 5.277zm.483-12.444c0-1.623 1.212-2.94 2.695-2.94 1.483 0 2.695 1.317 2.695 2.94s-1.18 2.912-2.64 2.942h-.09c-1.474-.032-2.656-1.337-2.656-2.942h-.004z" fill="#FFF"/></g></svg>
    <span> We Code </span>
</div> 
<div id="editor"></div>
<div id="sidebar">
    <div id="myVideoArea">
        <p> No stream detected</p>
    </div>
    <div id="chatArea">
        <div id="messagesArea"></div>
        <p><%=@nickname%></p>
        <input  id="messagebox" />
    </div>
</div>
<textarea name="code" id="raw_code" type="hidden" style="display: none;"><%= @snippet.code %></textarea>
<div id="footer">
  <span>Theme</span>
  <div >
    <select class="style_selector">
        <option value="ambiance">ambiance</option>
        <option value="chaos">chaos</option>
        <option value="chrome">chrome</option> 
        <option value="cobalt">cobalt</option>
        <option value="dawn">dawn</option>
        <option value="dreamweaver">dreamweaver</option>
        <option value="eclipse">eclipse</option>
        <option value="github">github</option>
        <option value="gruvbox">gruvbox</option>
        <option value="iplastic">iplastic</option>
        <option value="kr_theme">kr_theme</option>
        <option value="kuroir">kuroir</option>
        <option value="merbivore">merbivore</option>
        <option value="mono_industrial">mono_industrial</option>
        <option value="pastel_on_dark">pastel_on_dark</option>
        <option value="solarized_dark">solarized_dark</option>
        <option value="sqlserver">sqlserver</option>
        <option value="terminal">terminal</option>
        <option value="textmate">textmate</option>
        <option value="tomorrow">tomorrow</option>
        <option value="tomorrow-night">tomorrow-night</option>
        <option value="twilight">twilight</option>
        <option value="xcode">xcode</option>
    </select>
  </div>
  
  <span>Language</span>
  <div >
    <select class="language_selector">
        <option value="asm">asm</option>
        <option value="css">css</option>
        <option value="elixir">elixir</option>
        <option value="golang">go</option>
        <option value="groovy">groovy</option>
        <option value="java">java</option>
        <option value="jade">jade</option>
        <option value="javascript">javascript</option>
        <option value="java">java</option>
        <option value="json">json</option>
        <option value="haml">haml</option>
        <option value="haskell">haskell</option>
        <option value="html">html</option>
        <option value="latex">latex</option>
        <option value="lua">lua</option>
        <option value="matlab">matlab</option>
        <option value="markdown">markdown</option>
        <option value="objectivec">objective-c</option>
        <option value="php">php</option>
        <option value="prolog">prolog</option>
        <option value="r">r</option>
        <option value="ruby">ruby</option>
        <option value="rust">rust</option>
        <option value="scala">scala</option>
        <option value="sh">sh</option>
        <option value="sql">sql</option>
        <option value="swift">swift</option>
        <option value="stylus">stylus</option>
        <option value="typescript">typescript</option>
        <option value="text">text</option>
        <option value="xml">xml</option>
    </select>
  </div>
  
</div>


<script>

    function guid() {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
        }
        return s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();
    }

    var flag_changing = false;
    var flag_selection_changing = false;
    var emiter = guid(); 

    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/monokai");
    editor.getSession().setMode("ace/mode/<%= @snippet.language %>");
    document.querySelector(".language_selector").value = "<%= @snippet.language%>";
    ace_document = editor.getSession().getDocument();

    session = editor.getSession();
    selection = session.getSelection();

    <% if @snippet.theme.to_s != "" %>
      editor.setTheme("ace/theme/<%= @snippet.theme%>");
      document.querySelector(".style_selector").value = "<%= @snippet.theme%>";
    <% end %>

    <% if @snippet.code.to_s != "" %>
      ace_document.setValue(document.getElementById('raw_code').value);
    <% end %>

    editor.on("change", function (e) {  
        if (!flag_changing) {
            App.snippet.send(build_payload(e))
        }
    });

    document.querySelector(".style_selector").addEventListener("change", function (e) {
        if (!flag_changing) {
            App.snippet.send(build_payload())
            editor.setTheme("ace/theme/" + e.target.value);
        }
    });

    document.querySelector(".language_selector").addEventListener("change", function (e) {
        if (!flag_changing) {
            App.snippet.send(build_payload())
            editor.getSession().setMode("ace/mode/" + e.target.value);
        }
    });

    selection.on("changeCursor", function () {
        if (!flag_changing) {
            App.snippet.send(build_payload())
        }
    });
    selection.on("changeSelection", function () {
        if (!flag_changing) {
            App.snippet.send(build_payload())
        }
    });

    function save()
    {
        App.snippet.send(build_payload(null, true))
    }

    function build_payload(e=null, persist=null){
        return {
            todo: 'ideChanged',
            persist: persist,
            emiter: emiter,
            body: ace_document.getValue(), 
            e: e,
            slug: "<%=@snippet.slug%>",
            theme: document.querySelector(".style_selector").value,
            language: document.querySelector(".language_selector").value,
            cursor_position: editor.getCursorPosition(),
            selection_range: selection.getRange()
        }
    }

    document.querySelector("#messagebox").addEventListener("keyup", function(event) {
        event.preventDefault();
        if (event.keyCode === 13) {
            if (event.target.value != ""){
                sendChatMessage();
                event.target.value = "";
            }
        }
    });

    function build_message_payload(){
        return {
            emiter: emiter,
            todo: 'chatInput',
            user: '<%=@nickname%>',
            message: document.querySelector("#messagebox").value,
            color: '<%=@user_color%>'
        }
    }

    function sendChatMessage(){
        App.snippet.send(build_message_payload())
    }


    function shareOnMSN(){
        FB.ui({ method: 'share', link: window.location.href });
    } 

    App.snippet = App.cable.subscriptions.create({channel: "SnippetChannel", room: "<%=@snippet.slug%>"}, {
            connected() {},
                // Called when the subscription is ready for use on the server 
            disconnected() {},
                // Called when the subscription has been terminated by the server 
            received(data) {
                switch(data.todo) {
                    case "ideChanged": 
                        if (data.emiter != emiter) { refreshIDE(data) }
                        break;
                    case "chatInput":
                        appendChatMessage(data);
                        break; 
                }
            }
        }
    );

    function appendChatMessage(data){

        console.log("append message");
        console.log(data);
 
        var chatMessagesContainer = document.querySelector("#messagesArea");
        
        var spechBubleContainer = document.createElement("div");
        spechBubleContainer.className = "spechBubleContainer";
        avatarpicture = document.createElement("img");
        avatarpicture.src = "https://robohash.org/" + data.user.replace(" ", "-") + ".png" 

        var nameContainer = document.createElement("div");

        nameContainer.innerText = data.user

        spechBuble = document.createElement("div");
        if (data.emiter == emiter){
            nameContainer.className = "nickname-left";
            avatarpicture.className = "right";
            spechBuble.className = "speech-bubble-right";
        } else {
            nameContainer.className = "nickname-rigth";
            avatarpicture.className = "left";
            spechBuble.className = "speech-bubble-left";
        }
        
        spechBuble.style.backgroundColor = data.color;

        spechBuble.innerText = data.message;

        spechBubleContainer.appendChild(avatarpicture);
        spechBubleContainer.appendChild(spechBuble);
        spechBubleContainer.appendChild(nameContainer);

        chatMessagesContainer.appendChild(spechBubleContainer);

        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;

    
    }

    function refreshIDE(data){
        var event = new Event('change');

        flag_changing = true; 
        if (data.e != null) {
            res = data.e;
            switch (res['action']) {
            case 'insert': 
                position = { row: res['start']['row'], column: res['start']['column'] };
                ace_document.insert(position, (res['lines']).join(ace_document.getNewLineCharacter()));
                break;
            case 'remove':
                ace_document.remove({ start: res['start'], end: res['end'] });
                break;
            }
        }
    
        selection.moveToPosition(data.cursor_position);
        selection.setSelectionRange(data.selection_range);
        document.querySelector(".style_selector").value = data.theme; 
        document.querySelector(".language_selector").value = data.language;
        editor.setTheme("ace/theme/" + data.theme);
        editor.getSession().setMode("ace/mode/" + data.language);

        flag_changing = false;
    }

  
    var client = AgoraRTC.createClient({mode: 'live', codec: "h264"});

 
    client.init('8931f6fb1f79441186b4963ecd8c5e8c', function () {
      console.log("AgoraRTC client initialized"); 
    }, function (err) {
      console.log("AgoraRTC client init failed", err);
    });
 
    
    client.join(null, "snippet<%=@snippet.slug%>", parseInt(emiter), function(uid) {
        console.log("User " + uid + " join channel successfully");
    }, function(err) {
        console.log("Join channel failed", err);
    });
  

    client.on('stream-added', function (evt) {
        var stream = evt.stream;
        console.log("New stream added: " + stream.getId());

        client.subscribe(stream, function (err) {
            console.log("Subscribe stream failed", err);
        });
    });

    client.on('stream-subscribed', function (evt) {
        var remoteStream = evt.stream;
        console.log("Subscribe remote stream successfully: " + remoteStream.getId());
        remoteStream.play('myVideoArea');
    });



    
    

</script>